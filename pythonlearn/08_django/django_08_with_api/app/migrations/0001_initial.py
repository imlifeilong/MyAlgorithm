# Generated by Django 3.2.19 on 2024-11-12 14:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户表',
                'verbose_name_plural': '用户表',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('pid', models.IntegerField(blank=True, default=-1, null=True)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('original_title', models.CharField(blank=True, max_length=100, null=True)),
                ('cover', models.ImageField(null=True, upload_to='cover/')),
                ('author', models.CharField(blank=True, max_length=50, null=True)),
                ('translator', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('press', models.CharField(blank=True, max_length=50, null=True)),
                ('page_count', models.IntegerField(default=0)),
                ('price', models.CharField(blank=True, max_length=50, null=True)),
                ('isbn', models.CharField(blank=True, max_length=50, null=True)),
                ('pub_date', models.DateField(null=True)),
                ('online_time', models.DateTimeField(null=True)),
                ('status', models.CharField(choices=[('0', '上架'), ('1', '下架')], default='0', max_length=1)),
                ('repertory', models.IntegerField(default=0)),
                ('score', models.IntegerField(default=0)),
                ('layout', models.CharField(blank=True, max_length=10, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('pv', models.IntegerField(default=0)),
                ('recommend_count', models.IntegerField(default=0)),
                ('wish_count', models.IntegerField(default=0)),
                ('collect_count', models.IntegerField(default=0)),
                ('classification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classification_book', to='app.classification')),
                ('collect', models.ManyToManyField(blank=True, related_name='collect_books', to=settings.AUTH_USER_MODEL)),
                ('wish', models.ManyToManyField(blank=True, related_name='wish_books', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
